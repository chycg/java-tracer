###############################################################################
#ASM: a very small and fast Java bytecode manipulation framework
#Copyright (c) 2000-2011 INRIA, France Telecom
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without
#modification, are permitted provided that the following conditions
#are met:
#1. Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#2. Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#3. Neither the name of the copyright holders nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
#LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
#THE POSSIBILITY OF SUCH DAMAGE.
###############################################################################

# class mappings

#com.ali.asm/Edge=com.ali.asm/a
#com.ali.asm/Item=com.ali.asm/b
#com.ali.asm/FieldWriter=com.ali.asm/c
#com.ali.asm/MethodWriter=com.ali.asm/d
#com.ali.asm/AnnotationWriter=com.ali.asm/e
#com.ali.asm/Context=com.ali.asm/f

java/lang/StringBuilder=java/lang/StringBuffer


# field mappings

com.ali.asm/AnnotationWriter.cw=a
com.ali.asm/AnnotationWriter.size=b
com.ali.asm/AnnotationWriter.named=c
com.ali.asm/AnnotationWriter.bv=d
com.ali.asm/AnnotationWriter.parent=e
com.ali.asm/AnnotationWriter.offset=f
com.ali.asm/AnnotationWriter.next=g
com.ali.asm/AnnotationWriter.prev=h

com.ali.asm/Attribute.next=a
com.ali.asm/Attribute.value=b

com.ali.asm/ByteVector.data=a
com.ali.asm/ByteVector.length=b

com.ali.asm/ClassReader.items=a
com.ali.asm/ClassReader.strings=c
com.ali.asm/ClassReader.maxStringLength=d
#com.ali.asm/ClassReader.header=e

com.ali.asm/Context.attrs=a
com.ali.asm/Context.flags=b
com.ali.asm/Context.buffer=c
com.ali.asm/Context.bootstrapMethods=d
com.ali.asm/Context.access=e
com.ali.asm/Context.name=f
com.ali.asm/Context.desc=g
com.ali.asm/Context.labels=h
com.ali.asm/Context.typeRef=i
com.ali.asm/Context.typePath=j
com.ali.asm/Context.offset=k
com.ali.asm/Context.start=l
com.ali.asm/Context.end=m
com.ali.asm/Context.index=n
com.ali.asm/Context.offset=o
com.ali.asm/Context.mode=p
com.ali.asm/Context.localCount=q
com.ali.asm/Context.localDiff=r
com.ali.asm/Context.local=s
com.ali.asm/Context.stackCount=t
com.ali.asm/Context.stack=u

com.ali.asm/ClassWriter.TYPE=a
com.ali.asm/ClassWriter.version=b
com.ali.asm/ClassWriter.index=c
com.ali.asm/ClassWriter.pool=d
com.ali.asm/ClassWriter.items=e
com.ali.asm/ClassWriter.threshold=f
com.ali.asm/ClassWriter.key=g
com.ali.asm/ClassWriter.key2=h
com.ali.asm/ClassWriter.key3=i
com.ali.asm/ClassWriter.key4=j
com.ali.asm/ClassWriter.access=k
com.ali.asm/ClassWriter.name=l
com.ali.asm/ClassWriter.signature=m
com.ali.asm/ClassWriter.superName=n
com.ali.asm/ClassWriter.interfaceCount=o
com.ali.asm/ClassWriter.interfaces=p
com.ali.asm/ClassWriter.sourceFile=q
com.ali.asm/ClassWriter.sourceDebug=r
com.ali.asm/ClassWriter.enclosingMethodOwner=s
com.ali.asm/ClassWriter.enclosingMethod=t
com.ali.asm/ClassWriter.anns=u
com.ali.asm/ClassWriter.ianns=v
com.ali.asm/ClassWriter.tanns=N
com.ali.asm/ClassWriter.itanns=O
com.ali.asm/ClassWriter.attrs=w
com.ali.asm/ClassWriter.innerClassesCount=x
com.ali.asm/ClassWriter.innerClasses=y
com.ali.asm/ClassWriter.bootstrapMethodsCount=z
com.ali.asm/ClassWriter.bootstrapMethods=A
com.ali.asm/ClassWriter.firstField=B
com.ali.asm/ClassWriter.lastField=C
com.ali.asm/ClassWriter.firstMethod=D
com.ali.asm/ClassWriter.lastMethod=E
com.ali.asm/ClassWriter.computeMaxs=F
com.ali.asm/ClassWriter.typeCount=G
com.ali.asm/ClassWriter.typeTable=H
com.ali.asm/ClassWriter.thisName=I
com.ali.asm/ClassWriter.computeFrames=J
com.ali.asm/ClassWriter.computeMaxs=K
com.ali.asm/ClassWriter.invalidFrames=L
com.ali.asm/ClassWriter.cr=M
    
com.ali.asm/Edge.info=a
com.ali.asm/Edge.successor=b
com.ali.asm/Edge.next=c

com.ali.asm/Handler.start=a
com.ali.asm/Handler.end=b
com.ali.asm/Handler.handler=c
com.ali.asm/Handler.desc=d
com.ali.asm/Handler.type=e
com.ali.asm/Handler.next=f

com.ali.asm/FieldWriter.cw=b
com.ali.asm/FieldWriter.access=c
com.ali.asm/FieldWriter.name=d
com.ali.asm/FieldWriter.desc=e
com.ali.asm/FieldWriter.signature=f
com.ali.asm/FieldWriter.value=g
com.ali.asm/FieldWriter.anns=h
com.ali.asm/FieldWriter.ianns=i
com.ali.asm/FieldWriter.tanns=k
com.ali.asm/FieldWriter.itanns=l
com.ali.asm/FieldWriter.attrs=j

com.ali.asm/Item.index=a
com.ali.asm/Item.type=b
com.ali.asm/Item.intVal=c
com.ali.asm/Item.longVal=d
com.ali.asm/Item.strVal1=g
com.ali.asm/Item.strVal2=h
com.ali.asm/Item.strVal3=i
com.ali.asm/Item.hashCode=j
com.ali.asm/Item.next=k

com.ali.asm/Label.status=a
com.ali.asm/Label.line=b
com.ali.asm/Label.position=c
com.ali.asm/Label.referenceCount=d
com.ali.asm/Label.srcAndRefPositions=e
com.ali.asm/Label.inputStackTop=f
com.ali.asm/Label.outputStackMax=g
com.ali.asm/Label.frame=h
com.ali.asm/Label.successor=i
com.ali.asm/Label.successors=j
com.ali.asm/Label.next=k

com.ali.asm/Frame.SIZE=a
com.ali.asm/Frame.owner=b
com.ali.asm/Frame.inputLocals=c
com.ali.asm/Frame.inputStack=d
com.ali.asm/Frame.outputLocals=e
com.ali.asm/Frame.outputStack=f
com.ali.asm/Frame.outputStackTop=g
com.ali.asm/Frame.initializationCount=h
com.ali.asm/Frame.initializations=i

com.ali.asm/MethodWriter.cw=b
com.ali.asm/MethodWriter.access=c
com.ali.asm/MethodWriter.name=d
com.ali.asm/MethodWriter.desc=e
com.ali.asm/MethodWriter.descriptor=f
com.ali.asm/MethodWriter.signature=g
com.ali.asm/MethodWriter.classReaderOffset=h
com.ali.asm/MethodWriter.classReaderLength=i
com.ali.asm/MethodWriter.exceptionCount=j
com.ali.asm/MethodWriter.exceptions=k
com.ali.asm/MethodWriter.annd=l
com.ali.asm/MethodWriter.anns=m
com.ali.asm/MethodWriter.ianns=n
com.ali.asm/MethodWriter.tanns=U
com.ali.asm/MethodWriter.itanns=V
com.ali.asm/MethodWriter.panns=o
com.ali.asm/MethodWriter.ipanns=p
com.ali.asm/MethodWriter.attrs=q
com.ali.asm/MethodWriter.code=r
com.ali.asm/MethodWriter.maxStack=s
com.ali.asm/MethodWriter.maxLocals=t
com.ali.asm/MethodWriter.currentLocals=T
com.ali.asm/MethodWriter.frameCount=u
com.ali.asm/MethodWriter.stackMap=v
com.ali.asm/MethodWriter.previousFrameOffset=w
com.ali.asm/MethodWriter.previousFrame=x
#com.ali.asm/MethodWriter.frameIndex=y
com.ali.asm/MethodWriter.frame=z
com.ali.asm/MethodWriter.handlerCount=A
com.ali.asm/MethodWriter.firstHandler=B
com.ali.asm/MethodWriter.lastHandler=C
com.ali.asm/MethodWriter.methodParametersCount=Z
com.ali.asm/MethodWriter.methodParameters=$
com.ali.asm/MethodWriter.localVarCount=D
com.ali.asm/MethodWriter.localVar=E
com.ali.asm/MethodWriter.localVarTypeCount=F
com.ali.asm/MethodWriter.localVarType=G
com.ali.asm/MethodWriter.lineNumberCount=H
com.ali.asm/MethodWriter.lineNumber=I
com.ali.asm/MethodWriter.lastCodeOffset=Y
com.ali.asm/MethodWriter.ctanns=W
com.ali.asm/MethodWriter.ictanns=X
com.ali.asm/MethodWriter.cattrs=J
com.ali.asm/MethodWriter.resize=K
com.ali.asm/MethodWriter.subroutines=L
com.ali.asm/MethodWriter.compute=M
com.ali.asm/MethodWriter.labels=N
com.ali.asm/MethodWriter.previousBlock=O
com.ali.asm/MethodWriter.currentBlock=P
com.ali.asm/MethodWriter.stackSize=Q
com.ali.asm/MethodWriter.maxStackSize=R
com.ali.asm/MethodWriter.synthetics=S

com.ali.asm/Type.sort=a
com.ali.asm/Type.buf=b
com.ali.asm/Type.off=c
com.ali.asm/Type.len=d

com.ali.asm/TypeReference.value=a

com.ali.asm/TypePath.b=a
com.ali.asm/TypePath.offset=b

com.ali.asm/Handle.tag=a
com.ali.asm/Handle.owner=b
com.ali.asm/Handle.name=c
com.ali.asm/Handle.desc=d

com.ali.asm/signature/SignatureReader.signature=a

com.ali.asm/signature/SignatureWriter.buf=a
com.ali.asm/signature/SignatureWriter.hasFormals=b
com.ali.asm/signature/SignatureWriter.hasParameters=c
com.ali.asm/signature/SignatureWriter.argumentStack=d

# method mappings

com.ali.asm/AnnotationWriter.getSize()I=a
com.ali.asm/AnnotationWriter.put([Lcom.ali.asm/AnnotationWriter;ILcom.ali.asm/ByteVector;)V=a
com.ali.asm/AnnotationWriter.put(Lcom.ali.asm/ByteVector;)V=a
com.ali.asm/AnnotationWriter.putTarget(ILcom.ali.asm/TypePath;Lcom.ali.asm/ByteVector;)V=a

com.ali.asm/Attribute.getCount()I=a
com.ali.asm/Attribute.getSize(Lcom.ali.asm/ClassWriter;[BIII)I=a
com.ali.asm/Attribute.put(Lcom.ali.asm/ClassWriter;[BIIILcom.ali.asm/ByteVector;)V=a

com.ali.asm/ByteVector.enlarge(I)V=a
com.ali.asm/ByteVector.put11(II)Lcom.ali.asm/ByteVector;=a
com.ali.asm/ByteVector.put12(II)Lcom.ali.asm/ByteVector;=b

com.ali.asm/ClassReader.copyPool(Lcom.ali.asm/ClassWriter;)V=a
com.ali.asm/ClassReader.copyBootstrapMethods(Lcom.ali.asm/ClassWriter;[Lcom.ali.asm/Item;[C)V=a
com.ali.asm/ClassReader.readField(Lcom.ali.asm/ClassVisitor;Lcom.ali.asm/Context;I)I=a
com.ali.asm/ClassReader.readMethod(Lcom.ali.asm/ClassVisitor;Lcom.ali.asm/Context;I)I=b
com.ali.asm/ClassReader.readCode(Lcom.ali.asm/MethodVisitor;Lcom.ali.asm/Context;I)V=a
com.ali.asm/ClassReader.readTypeAnnotations(Lcom.ali.asm/MethodVisitor;Lcom.ali.asm/Context;IZ)[I=a
com.ali.asm/ClassReader.readAnnotationTarget(Lcom.ali.asm/Context;I)I=a
com.ali.asm/ClassReader.readAnnotationValues(I[CZLcom.ali.asm/AnnotationVisitor;)I=a
com.ali.asm/ClassReader.readAnnotationValue(I[CLjava/lang/String;Lcom.ali.asm/AnnotationVisitor;)I=a
com.ali.asm/ClassReader.getAttributes()I=a
com.ali.asm/ClassReader.readAttribute([Lcom.ali.asm/Attribute;Ljava/lang/String;II[CI[Lcom.ali.asm/Label;)Lcom.ali.asm/Attribute;=a
com.ali.asm/ClassReader.readClass(Ljava/io/InputStream;Z)[B=a
com.ali.asm/ClassReader.readParameterAnnotations(Lcom.ali.asm/MethodVisitor;Lcom.ali.asm/Context;IZ)V=b
com.ali.asm/ClassReader.readUTF(II[C)Ljava/lang/String;=a
com.ali.asm/ClassReader.getImplicitFrame(Lcom.ali.asm/Context;)V=a
com.ali.asm/ClassReader.readFrame(IZZLcom.ali.asm/Context;)I=a
com.ali.asm/ClassReader.readFrameType([Ljava/lang/Object;II[C[Lcom.ali.asm/Label;)I=a

com.ali.asm/ClassWriter.get(Lcom.ali.asm/Item;)Lcom.ali.asm/Item;=a
com.ali.asm/ClassWriter.newClassItem(Ljava/lang/String;)Lcom.ali.asm/Item;=a
com.ali.asm/ClassWriter.newConstItem(Ljava/lang/Object;)Lcom.ali.asm/Item;=a
com.ali.asm/ClassWriter.newDouble(D)Lcom.ali.asm/Item;=a
com.ali.asm/ClassWriter.newFloat(F)Lcom.ali.asm/Item;=a
com.ali.asm/ClassWriter.newInteger(I)Lcom.ali.asm/Item;=a
com.ali.asm/ClassWriter.newLong(J)Lcom.ali.asm/Item;=a
com.ali.asm/ClassWriter.newMethodItem(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Lcom.ali.asm/Item;=a
com.ali.asm/ClassWriter.newString(Ljava/lang/String;)Lcom.ali.asm/Item;=b
com.ali.asm/ClassWriter.put122(III)V=a
com.ali.asm/ClassWriter.put112(III)V=b
com.ali.asm/ClassWriter.put(Lcom.ali.asm/Item;)V=b
com.ali.asm/ClassWriter.newFieldItem(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom.ali.asm/Item;=a
com.ali.asm/ClassWriter.addType(Ljava/lang/String;)I=c
com.ali.asm/ClassWriter.addUninitializedType(Ljava/lang/String;I)I=a
com.ali.asm/ClassWriter.addType(Lcom.ali.asm/Item;)Lcom.ali.asm/Item;=c
com.ali.asm/ClassWriter.getMergedType(II)I=a
com.ali.asm/ClassWriter.newNameTypeItem(Ljava/lang/String;Ljava/lang/String;)Lcom.ali.asm/Item;=a
com.ali.asm/ClassWriter.newMethodTypeItem(Ljava/lang/String;)Lcom.ali.asm/Item;=c
com.ali.asm/ClassWriter.newHandleItem(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom.ali.asm/Item;=a
com.ali.asm/ClassWriter.newInvokeDynamicItem(Ljava/lang/String;Ljava/lang/String;Lcom.ali.asm/Handle;[Ljava/lang/Object;)Lcom.ali.asm/Item;=a

com.ali.asm/FieldWriter.getSize()I=a
com.ali.asm/FieldWriter.put(Lcom.ali.asm/ByteVector;)V=a

com.ali.asm/Item.isEqualTo(Lcom.ali.asm/Item;)Z=a
com.ali.asm/Item.set(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V=a
com.ali.asm/Item.set(D)V=a
com.ali.asm/Item.set(F)V=a
com.ali.asm/Item.set(I)V=a
com.ali.asm/Item.set(J)V=a
com.ali.asm/Item.set(Ljava/lang/String;Ljava/lang/String;I)V=a
com.ali.asm/Item.set(II)V=a

com.ali.asm/Label.addReference(II)V=a
com.ali.asm/Label.put(Lcom.ali.asm/MethodWriter;Lcom.ali.asm/ByteVector;IZ)V=a
com.ali.asm/Label.resolve(Lcom.ali.asm/MethodWriter;I[B)Z=a
com.ali.asm/Label.getFirst()Lcom.ali.asm/Label;=a
com.ali.asm/Label.inSubroutine(J)Z=a
com.ali.asm/Label.inSameSubroutine(Lcom.ali.asm/Label;)Z=a
com.ali.asm/Label.addToSubroutine(JI)V=a
com.ali.asm/Label.visitSubroutine(Lcom.ali.asm/Label;JI)V=b

com.ali.asm/Frame.get(I)I=a
com.ali.asm/Frame.set(II)V=a
com.ali.asm/Frame.push(I)V=b
com.ali.asm/Frame.push(Lcom.ali.asm/ClassWriter;Ljava/lang/String;)V=a
com.ali.asm/Frame.type(Lcom.ali.asm/ClassWriter;Ljava/lang/String;)I=b
com.ali.asm/Frame.pop()I=a
com.ali.asm/Frame.pop(Ljava/lang/String;)V=a
com.ali.asm/Frame.pop(I)V=c
com.ali.asm/Frame.init(I)V=d
com.ali.asm/Frame.init(Lcom.ali.asm/ClassWriter;I)I=a
com.ali.asm/Frame.initInputFrame(Lcom.ali.asm/ClassWriter;I[Lcom.ali.asm/Type;I)V=a
com.ali.asm/Frame.execute(IILcom.ali.asm/ClassWriter;Lcom.ali.asm/Item;)V=a
com.ali.asm/Frame.merge(Lcom.ali.asm/ClassWriter;Lcom.ali.asm/Frame;I)Z=a
com.ali.asm/Frame.merge(Lcom.ali.asm/ClassWriter;I[II)Z=a

com.ali.asm/Handler.remove(Lcom.ali.asm/Handler;Lcom.ali.asm/Label;Lcom.ali.asm/Label;)Lcom.ali.asm/Handler;=a

com.ali.asm/MethodWriter.visitSwitchInsn(Lcom.ali.asm/Label;[Lcom.ali.asm/Label;)V=a
com.ali.asm/MethodWriter.addSuccessor(ILcom.ali.asm/Label;)V=a
com.ali.asm/MethodWriter.getNewOffset([I[III)I=a
com.ali.asm/MethodWriter.getSize()I=a
com.ali.asm/MethodWriter.put(Lcom.ali.asm/ByteVector;)V=a
com.ali.asm/MethodWriter.readInt([BI)I=a
com.ali.asm/MethodWriter.readShort([BI)S=b
com.ali.asm/MethodWriter.readUnsignedShort([BI)I=c
com.ali.asm/MethodWriter.writeShort([BII)V=a
com.ali.asm/MethodWriter.visitFrame(Lcom.ali.asm/Frame;)V=b
com.ali.asm/MethodWriter.visitImplicitFirstFrame()V=f
com.ali.asm/MethodWriter.startFrame(III)I=a
com.ali.asm/MethodWriter.endFrame()V=b
com.ali.asm/MethodWriter.writeFrame()V=c
com.ali.asm/MethodWriter.resizeInstructions()V=d
com.ali.asm/MethodWriter.noSuccessor()V=e
com.ali.asm/MethodWriter.writeFrameTypes(II)V=a
com.ali.asm/MethodWriter.writeFrameType(Ljava/lang/Object;)V=a
com.ali.asm/MethodWriter.getNewOffset([I[ILcom.ali.asm/Label;)V=a

com.ali.asm/Type.getType([CI)Lcom.ali.asm/Type;=a
com.ali.asm/Type.getDescriptor(Ljava/lang/StringBuffer;)V=a
com.ali.asm/Type.getDescriptor(Ljava/lang/StringBuffer;Ljava/lang/Class;)V=a

com.ali.asm/signature/SignatureReader.parseType(Ljava/lang/String;ILcom.ali.asm/signature/SignatureVisitor;)I=a

com.ali.asm/signature/SignatureWriter.endFormals()V=a
com.ali.asm/signature/SignatureWriter.endArguments()V=b
     
